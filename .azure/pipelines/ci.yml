# Azure pipeline definition for the integration of the solution (continuous integration)
# See: https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pr:
  autoCancel: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

schedules:
- cron: "0 0 * * *"
  displayName: 'Daily midnight build'
  branches:
    include:
    - master
  always: true

variables:
# library variable groups
- group: 'build-tools'
- group: 'integration-testing-sandbox'
# common task variables
- name: 'BuildConfiguration'
  value: 'Debug'
- name: 'SolutionFile'
  value: 'Devpro.Hubspot.sln'
- name: 'TestProjects'
  value: 'test/*Tests/*.csproj'
- name: 'UnitTestProjects'
  value: 'test/*UnitTests/*.csproj'
# tool variables (Sonar)
- name: 'sonar.project.name'
  value: 'HubSpot .NET Client'
- name: 'sonar.project.key'
  value: 'devpro.hubspot.dotnet'

# Unit testing
stages:
- stage: 'unit_testing'
  displayName: 'Unit testing'
  jobs:
  # Run on Linux (Ubuntu)
  - job: 'linuxci'
    displayName: 'Linux CI'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Get latest .NET SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Build the dotnet solution'
      inputs:
        command: 'build'
        projects: $(SolutionFile)
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run the dotnet tests'
      inputs:
        command: 'test'
        projects: $(UnitTestProjects)
        arguments: '-c $(BuildConfiguration) --collect:"XPlat Code Coverage"'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator global tool'
      inputs:
        command: custom
        custom: tool
        arguments: 'install -g dotnet-reportgenerator-globaltool'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
      displayName: 'Create the reports'
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish the code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'
- stage: 'integration_testing'
  displayName: 'Integration testing'
  dependsOn: [] # mandatory to be able to run unit and integration testing stages in parallel
  jobs:
  - job: 'windows_integrationtests'
    displayName: 'Windows CI'
    pool:
      # code coverage generation only works on Windows for the moment
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET packages'
      inputs:
        command: 'restore'
        projects: '$(SolutionFile)'
        feedsToUse: 'select'
        noCache: $(dotnet.cache.disable)
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: SonarCloudPrepare@1
      displayName: 'Prepare code analysis'
      inputs:
        SonarCloud: '$(sonar.instance)'
        organization: '$(sonar.organization)'
        scannerMode: 'MSBuild'
        projectKey: '$(sonar.project.key)'
        projectName: '$(sonar.project.name)'
        extraProperties: |
          sonar.cpd.exclusions=**/Models/*.cs,**/Dto/*.cs
          sonar.exclusions=**/wwwroot/lib/**
    - task: DotNetCoreCLI@2
      displayName: 'Build the .NET solution'
      inputs:
        command: 'build'
        projects: $(SolutionFile)
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run all tests on .NET projects'
      inputs:
        command: 'test'
        projects: $(TestProjects)
        arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
        Hubspot__Sandbox__BaseUrl: $(hubspot.api.baseurl)
        Hubspot__Sandbox__ApiKey: $(hubspot.api.key)
        Hubspot__Sandbox__ApplicationId: $(hubspot.application.id)
        Hubspot__Sandbox__ClientId: $(hubspot.application.clientid)
        Hubspot__Sandbox__ClientSecret: $(hubspot.application.clientsecret)
        Hubspot__Sandbox__RedirectUrl: $(hubspot.application.redirecturl)
        Hubspot__Sandbox__OAuthUrl: $(hubspot.application.oauthurl)
    - task: SonarCloudAnalyze@1
      displayName: 'Analyze the code with Sonar'
    - task: SonarCloudPublish@1
      displayName: 'Publish the code analysis results'
      inputs:
        pollingTimeoutSec: '300'
